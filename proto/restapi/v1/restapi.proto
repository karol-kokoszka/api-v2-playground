syntax = "proto3";

package proto.restapi.v1;
option go_package = "proto/restapi";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "proto/srv/book/v1/book.proto";
import "proto/srv/shelf/v1/shelf.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "API Server";
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
  responses: {
    key: "500";
    value: {
      description: "Server error";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

// This API represents a simple book repository.
service BookService {
  // Creates a book, and returns the new Book.
  rpc CreateBook(proto.srv.book.v1.CreateBookRequest) returns (proto.srv.book.v1.CreateBookResponse) {
    option (google.api.http) = {
      post: "/v1/books"
      body: "book"
    };
  }

  // Gets a book. Returns NOT_FOUND if the book does not exist.
  rpc GetBook(proto.srv.book.v1.GetBookRequest) returns (proto.srv.book.v1.GetBookResponse) {
    option (google.api.http) = {
      get: "/v1/books/{id}"
    };
  }

  // Lists all books. The order is unspecified but deterministic. Newly
  // created books will not necessarily be added to the end of this list.
  rpc ListBooks(proto.srv.book.v1.ListBooksRequest) returns (proto.srv.book.v1.ListBooksResponse) {
    option (google.api.http) = {
      get: "/v1/books"
    };
  }

  // Deletes a book. Returns NOT_FOUND if the book does not exist.
  rpc DeleteBook(proto.srv.book.v1.DeleteBookRequest) returns (proto.srv.book.v1.DeleteBookResponse) {
    option (google.api.http) = {
      delete: "/v1/books/{id}"
    };
  }

  // Updates a book. Returns INVALID_ARGUMENT if the id of the book
  // is non-empty and does equal the previous id.
  rpc UpdateBook(proto.srv.book.v1.UpdateBookRequest) returns (proto.srv.book.v1.UpdateBookResponse) {
    option (google.api.http) = {
      put: "/v1/books/{id}"
      body: "book"
    };
  }
}

service ShelfService {
  // Creates a shelf, and returns the new Shelf.
  rpc CreateShelf(proto.srv.shelf.v1.CreateShelfRequest) returns (proto.srv.shelf.v1.CreateShelfResponse) {
    option (google.api.http) = {
      post: "/v1/shelves"
      body: "shelf"
    };
  }

  // Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
  rpc GetShelf(proto.srv.shelf.v1.GetShelfRequest) returns (proto.srv.shelf.v1.GetShelfResponse) {
    option(google.api.http) = {
      get: "/v1/shelves/{id}"
    };
  }

  // Lists shelves. The order is unspecified but deterministic. Newly created
  // shelves will not necessarily be added to the end of this list.
  rpc ListShelves(proto.srv.shelf.v1.ListShelvesRequest) returns (proto.srv.shelf.v1.ListShelvesResponse) {
    option(google.api.http) = {
      get: "/v1/shelves"
    };
  }

  // Deletes a shelf. Returns NOT_FOUND if the shelf does not exist.
  rpc DeleteShelf(proto.srv.shelf.v1.DeleteShelfRequest) returns (proto.srv.shelf.v1.DeleteShelfResponse) {
    option(google.api.http) = {
      delete: "/v1/shelves/{id}"
    };
  }

  // Merges two shelves by adding all books from the shelf named
  // `other_shelf_id` to shelf `id`, and deletes
  // `other_shelf_id`. Returns the updated shelf.
  // The book ids of the moved books may not be the same as the original books.
  //
  // Returns NOT_FOUND if either shelf does not exist.
  // This call is a no-op if the specified shelves are the same.
  rpc MergeShelves(proto.srv.shelf.v1.MergeShelvesRequest) returns (proto.srv.shelf.v1.MergeShelvesResponse) {
    option(google.api.http) = {
      post: "/v1/shelves/{id}/merge"
    };
  }
}
